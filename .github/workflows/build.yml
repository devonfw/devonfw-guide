
env:
  REPO_CONSOLIDATE: "devonfw-guide"
  BUILD_USER: ${{ secrets.BUILD_USER }}
  BUILD_USER_PASSWD: ${{ secrets.BUILD_USER_PASSWD }}
  BUILD_USER_EMAIL:  ${{ secrets.BUILD_USER_EMAIL }}
on:
  push:
    branches:
      - master
name: Generate PDF and Update Website
jobs:
  build:
    if: ${{ github.repository == 'devonfw/devonfw-guide'}}
    runs-on: ubuntu-latest
    steps:
      - name: setup variable
        run: |
          echo "REPO=$(echo '${{ github.event.pull_request.head.repo.full_name }}' | awk -F '/' '{print $1}')" >> $GITHUB_ENV
          echo "ORG=$(echo '${{ github.repository }}' | awk -F '/' '{print $1}')" >> $GITHUB_ENV
        shell: bash
      - name: setup git user
        run: |
          git config --global user.email ${BUILD_USER_EMAIL}
          git config --global user.name ${BUILD_USER}
      - name: Install imagemagick
        run: |
          cd ..
          sudo apt-get update
          sudo apt-get install -y imagemagick
          cd ${REPO_CONSOLIDATE}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Fix PNG images
        run: |
          find . -name '*.png' -exec mogrify -interlace none -format png {} +
          find . -name '*.PNG' -exec mogrify -interlace none -format PNG {} +
      - name: Generate PDF
        run: |
          mvn clean package -Ddocgen.images.dir=images,documentation -Doutput.format=pdf
          mv ./target/generated-docs/master.pdf ./devonfw_guide.pdf
      - name: Draft GitHub release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:  "Build# ${{ github.run_number }}"
          release_name: "Release #${{ github.run_number }}"
          draft: true
      - name: Upload the pdf guide to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./devonfw_guide.pdf
          asset_name: devonfw_guide.pdf
          asset_content_type: application/pdf
      - name: Update Website on success
        run: |
          git clone https://github.com/devonfw/devonfw.github.io.git
          cd devonfw.github.io/
          git submodule update --init --recursive
          cd devonfw-guide/
          git fetch
          git merge origin/master
          cd ..
          git add devonfw-guide
          git commit -m "[DocUpdate]"
          git push origin develop
